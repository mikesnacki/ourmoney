// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateIncomingRequest {
  count: Int!
}

type AggregateLineItem {
  count: Int!
}

type AggregateLinkedUser {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type IncomingRequest {
  id: ID!
  requestAccepted: Boolean!
  userEmail: String!
}

type IncomingRequestConnection {
  pageInfo: PageInfo!
  edges: [IncomingRequestEdge]!
  aggregate: AggregateIncomingRequest!
}

input IncomingRequestCreateInput {
  id: ID
  requestAccepted: Boolean!
  userEmail: String!
}

input IncomingRequestCreateOneInput {
  create: IncomingRequestCreateInput
  connect: IncomingRequestWhereUniqueInput
}

type IncomingRequestEdge {
  node: IncomingRequest!
  cursor: String!
}

enum IncomingRequestOrderByInput {
  id_ASC
  id_DESC
  requestAccepted_ASC
  requestAccepted_DESC
  userEmail_ASC
  userEmail_DESC
}

type IncomingRequestPreviousValues {
  id: ID!
  requestAccepted: Boolean!
  userEmail: String!
}

type IncomingRequestSubscriptionPayload {
  mutation: MutationType!
  node: IncomingRequest
  updatedFields: [String!]
  previousValues: IncomingRequestPreviousValues
}

input IncomingRequestSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: IncomingRequestWhereInput
  AND: [IncomingRequestSubscriptionWhereInput!]
  OR: [IncomingRequestSubscriptionWhereInput!]
  NOT: [IncomingRequestSubscriptionWhereInput!]
}

input IncomingRequestUpdateDataInput {
  requestAccepted: Boolean
  userEmail: String
}

input IncomingRequestUpdateInput {
  requestAccepted: Boolean
  userEmail: String
}

input IncomingRequestUpdateManyMutationInput {
  requestAccepted: Boolean
  userEmail: String
}

input IncomingRequestUpdateOneInput {
  create: IncomingRequestCreateInput
  update: IncomingRequestUpdateDataInput
  upsert: IncomingRequestUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: IncomingRequestWhereUniqueInput
}

input IncomingRequestUpsertNestedInput {
  update: IncomingRequestUpdateDataInput!
  create: IncomingRequestCreateInput!
}

input IncomingRequestWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  requestAccepted: Boolean
  requestAccepted_not: Boolean
  userEmail: String
  userEmail_not: String
  userEmail_in: [String!]
  userEmail_not_in: [String!]
  userEmail_lt: String
  userEmail_lte: String
  userEmail_gt: String
  userEmail_gte: String
  userEmail_contains: String
  userEmail_not_contains: String
  userEmail_starts_with: String
  userEmail_not_starts_with: String
  userEmail_ends_with: String
  userEmail_not_ends_with: String
  AND: [IncomingRequestWhereInput!]
  OR: [IncomingRequestWhereInput!]
  NOT: [IncomingRequestWhereInput!]
}

input IncomingRequestWhereUniqueInput {
  id: ID
}

type LineItem {
  id: ID!
  createdAt: DateTime!
  name: String!
  amount: Float!
  type: String!
  deleted: Boolean
  user: User!
}

type LineItemConnection {
  pageInfo: PageInfo!
  edges: [LineItemEdge]!
  aggregate: AggregateLineItem!
}

input LineItemCreateInput {
  id: ID
  name: String!
  amount: Float!
  type: String!
  deleted: Boolean
  user: UserCreateOneWithoutLineItemsInput!
}

input LineItemCreateManyWithoutUserInput {
  create: [LineItemCreateWithoutUserInput!]
  connect: [LineItemWhereUniqueInput!]
}

input LineItemCreateWithoutUserInput {
  id: ID
  name: String!
  amount: Float!
  type: String!
  deleted: Boolean
}

type LineItemEdge {
  node: LineItem!
  cursor: String!
}

enum LineItemOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  amount_ASC
  amount_DESC
  type_ASC
  type_DESC
  deleted_ASC
  deleted_DESC
}

type LineItemPreviousValues {
  id: ID!
  createdAt: DateTime!
  name: String!
  amount: Float!
  type: String!
  deleted: Boolean
}

input LineItemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  amount: Float
  amount_not: Float
  amount_in: [Float!]
  amount_not_in: [Float!]
  amount_lt: Float
  amount_lte: Float
  amount_gt: Float
  amount_gte: Float
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  deleted: Boolean
  deleted_not: Boolean
  AND: [LineItemScalarWhereInput!]
  OR: [LineItemScalarWhereInput!]
  NOT: [LineItemScalarWhereInput!]
}

type LineItemSubscriptionPayload {
  mutation: MutationType!
  node: LineItem
  updatedFields: [String!]
  previousValues: LineItemPreviousValues
}

input LineItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LineItemWhereInput
  AND: [LineItemSubscriptionWhereInput!]
  OR: [LineItemSubscriptionWhereInput!]
  NOT: [LineItemSubscriptionWhereInput!]
}

input LineItemUpdateInput {
  name: String
  amount: Float
  type: String
  deleted: Boolean
  user: UserUpdateOneRequiredWithoutLineItemsInput
}

input LineItemUpdateManyDataInput {
  name: String
  amount: Float
  type: String
  deleted: Boolean
}

input LineItemUpdateManyMutationInput {
  name: String
  amount: Float
  type: String
  deleted: Boolean
}

input LineItemUpdateManyWithoutUserInput {
  create: [LineItemCreateWithoutUserInput!]
  delete: [LineItemWhereUniqueInput!]
  connect: [LineItemWhereUniqueInput!]
  set: [LineItemWhereUniqueInput!]
  disconnect: [LineItemWhereUniqueInput!]
  update: [LineItemUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [LineItemUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [LineItemScalarWhereInput!]
  updateMany: [LineItemUpdateManyWithWhereNestedInput!]
}

input LineItemUpdateManyWithWhereNestedInput {
  where: LineItemScalarWhereInput!
  data: LineItemUpdateManyDataInput!
}

input LineItemUpdateWithoutUserDataInput {
  name: String
  amount: Float
  type: String
  deleted: Boolean
}

input LineItemUpdateWithWhereUniqueWithoutUserInput {
  where: LineItemWhereUniqueInput!
  data: LineItemUpdateWithoutUserDataInput!
}

input LineItemUpsertWithWhereUniqueWithoutUserInput {
  where: LineItemWhereUniqueInput!
  update: LineItemUpdateWithoutUserDataInput!
  create: LineItemCreateWithoutUserInput!
}

input LineItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  amount: Float
  amount_not: Float
  amount_in: [Float!]
  amount_not_in: [Float!]
  amount_lt: Float
  amount_lte: Float
  amount_gt: Float
  amount_gte: Float
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  deleted: Boolean
  deleted_not: Boolean
  user: UserWhereInput
  AND: [LineItemWhereInput!]
  OR: [LineItemWhereInput!]
  NOT: [LineItemWhereInput!]
}

input LineItemWhereUniqueInput {
  id: ID
}

type LinkedUser {
  id: ID!
  inviteSent: Boolean
  inviteAccepted: Boolean
  invitedUserName: String
  linkedUser: User
}

type LinkedUserConnection {
  pageInfo: PageInfo!
  edges: [LinkedUserEdge]!
  aggregate: AggregateLinkedUser!
}

input LinkedUserCreateInput {
  id: ID
  inviteSent: Boolean
  inviteAccepted: Boolean
  invitedUserName: String
  linkedUser: UserCreateOneWithoutLinkedUserInput
}

input LinkedUserCreateOneWithoutLinkedUserInput {
  create: LinkedUserCreateWithoutLinkedUserInput
  connect: LinkedUserWhereUniqueInput
}

input LinkedUserCreateWithoutLinkedUserInput {
  id: ID
  inviteSent: Boolean
  inviteAccepted: Boolean
  invitedUserName: String
}

type LinkedUserEdge {
  node: LinkedUser!
  cursor: String!
}

enum LinkedUserOrderByInput {
  id_ASC
  id_DESC
  inviteSent_ASC
  inviteSent_DESC
  inviteAccepted_ASC
  inviteAccepted_DESC
  invitedUserName_ASC
  invitedUserName_DESC
}

type LinkedUserPreviousValues {
  id: ID!
  inviteSent: Boolean
  inviteAccepted: Boolean
  invitedUserName: String
}

type LinkedUserSubscriptionPayload {
  mutation: MutationType!
  node: LinkedUser
  updatedFields: [String!]
  previousValues: LinkedUserPreviousValues
}

input LinkedUserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LinkedUserWhereInput
  AND: [LinkedUserSubscriptionWhereInput!]
  OR: [LinkedUserSubscriptionWhereInput!]
  NOT: [LinkedUserSubscriptionWhereInput!]
}

input LinkedUserUpdateInput {
  inviteSent: Boolean
  inviteAccepted: Boolean
  invitedUserName: String
  linkedUser: UserUpdateOneWithoutLinkedUserInput
}

input LinkedUserUpdateManyMutationInput {
  inviteSent: Boolean
  inviteAccepted: Boolean
  invitedUserName: String
}

input LinkedUserUpdateOneWithoutLinkedUserInput {
  create: LinkedUserCreateWithoutLinkedUserInput
  update: LinkedUserUpdateWithoutLinkedUserDataInput
  upsert: LinkedUserUpsertWithoutLinkedUserInput
  delete: Boolean
  disconnect: Boolean
  connect: LinkedUserWhereUniqueInput
}

input LinkedUserUpdateWithoutLinkedUserDataInput {
  inviteSent: Boolean
  inviteAccepted: Boolean
  invitedUserName: String
}

input LinkedUserUpsertWithoutLinkedUserInput {
  update: LinkedUserUpdateWithoutLinkedUserDataInput!
  create: LinkedUserCreateWithoutLinkedUserInput!
}

input LinkedUserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  inviteSent: Boolean
  inviteSent_not: Boolean
  inviteAccepted: Boolean
  inviteAccepted_not: Boolean
  invitedUserName: String
  invitedUserName_not: String
  invitedUserName_in: [String!]
  invitedUserName_not_in: [String!]
  invitedUserName_lt: String
  invitedUserName_lte: String
  invitedUserName_gt: String
  invitedUserName_gte: String
  invitedUserName_contains: String
  invitedUserName_not_contains: String
  invitedUserName_starts_with: String
  invitedUserName_not_starts_with: String
  invitedUserName_ends_with: String
  invitedUserName_not_ends_with: String
  linkedUser: UserWhereInput
  AND: [LinkedUserWhereInput!]
  OR: [LinkedUserWhereInput!]
  NOT: [LinkedUserWhereInput!]
}

input LinkedUserWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createIncomingRequest(data: IncomingRequestCreateInput!): IncomingRequest!
  updateIncomingRequest(data: IncomingRequestUpdateInput!, where: IncomingRequestWhereUniqueInput!): IncomingRequest
  updateManyIncomingRequests(data: IncomingRequestUpdateManyMutationInput!, where: IncomingRequestWhereInput): BatchPayload!
  upsertIncomingRequest(where: IncomingRequestWhereUniqueInput!, create: IncomingRequestCreateInput!, update: IncomingRequestUpdateInput!): IncomingRequest!
  deleteIncomingRequest(where: IncomingRequestWhereUniqueInput!): IncomingRequest
  deleteManyIncomingRequests(where: IncomingRequestWhereInput): BatchPayload!
  createLineItem(data: LineItemCreateInput!): LineItem!
  updateLineItem(data: LineItemUpdateInput!, where: LineItemWhereUniqueInput!): LineItem
  updateManyLineItems(data: LineItemUpdateManyMutationInput!, where: LineItemWhereInput): BatchPayload!
  upsertLineItem(where: LineItemWhereUniqueInput!, create: LineItemCreateInput!, update: LineItemUpdateInput!): LineItem!
  deleteLineItem(where: LineItemWhereUniqueInput!): LineItem
  deleteManyLineItems(where: LineItemWhereInput): BatchPayload!
  createLinkedUser(data: LinkedUserCreateInput!): LinkedUser!
  updateLinkedUser(data: LinkedUserUpdateInput!, where: LinkedUserWhereUniqueInput!): LinkedUser
  updateManyLinkedUsers(data: LinkedUserUpdateManyMutationInput!, where: LinkedUserWhereInput): BatchPayload!
  upsertLinkedUser(where: LinkedUserWhereUniqueInput!, create: LinkedUserCreateInput!, update: LinkedUserUpdateInput!): LinkedUser!
  deleteLinkedUser(where: LinkedUserWhereUniqueInput!): LinkedUser
  deleteManyLinkedUsers(where: LinkedUserWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  incomingRequest(where: IncomingRequestWhereUniqueInput!): IncomingRequest
  incomingRequests(where: IncomingRequestWhereInput, orderBy: IncomingRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [IncomingRequest]!
  incomingRequestsConnection(where: IncomingRequestWhereInput, orderBy: IncomingRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IncomingRequestConnection!
  lineItem(where: LineItemWhereUniqueInput!): LineItem
  lineItems(where: LineItemWhereInput, orderBy: LineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LineItem]!
  lineItemsConnection(where: LineItemWhereInput, orderBy: LineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LineItemConnection!
  linkedUser(where: LinkedUserWhereUniqueInput!): LinkedUser
  linkedUsers(where: LinkedUserWhereInput, orderBy: LinkedUserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LinkedUser]!
  linkedUsersConnection(where: LinkedUserWhereInput, orderBy: LinkedUserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LinkedUserConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  incomingRequest(where: IncomingRequestSubscriptionWhereInput): IncomingRequestSubscriptionPayload
  lineItem(where: LineItemSubscriptionWhereInput): LineItemSubscriptionPayload
  linkedUser(where: LinkedUserSubscriptionWhereInput): LinkedUserSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String!
  linkedUser: LinkedUser
  incomingRequest: IncomingRequest
  lineItems(where: LineItemWhereInput, orderBy: LineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LineItem!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  linkedUser: LinkedUserCreateOneWithoutLinkedUserInput
  incomingRequest: IncomingRequestCreateOneInput
  lineItems: LineItemCreateManyWithoutUserInput
}

input UserCreateOneWithoutLineItemsInput {
  create: UserCreateWithoutLineItemsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLinkedUserInput {
  create: UserCreateWithoutLinkedUserInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutLineItemsInput {
  id: ID
  email: String!
  linkedUser: LinkedUserCreateOneWithoutLinkedUserInput
  incomingRequest: IncomingRequestCreateOneInput
}

input UserCreateWithoutLinkedUserInput {
  id: ID
  email: String!
  incomingRequest: IncomingRequestCreateOneInput
  lineItems: LineItemCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  linkedUser: LinkedUserUpdateOneWithoutLinkedUserInput
  incomingRequest: IncomingRequestUpdateOneInput
  lineItems: LineItemUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  email: String
}

input UserUpdateOneRequiredWithoutLineItemsInput {
  create: UserCreateWithoutLineItemsInput
  update: UserUpdateWithoutLineItemsDataInput
  upsert: UserUpsertWithoutLineItemsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutLinkedUserInput {
  create: UserCreateWithoutLinkedUserInput
  update: UserUpdateWithoutLinkedUserDataInput
  upsert: UserUpsertWithoutLinkedUserInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutLineItemsDataInput {
  email: String
  linkedUser: LinkedUserUpdateOneWithoutLinkedUserInput
  incomingRequest: IncomingRequestUpdateOneInput
}

input UserUpdateWithoutLinkedUserDataInput {
  email: String
  incomingRequest: IncomingRequestUpdateOneInput
  lineItems: LineItemUpdateManyWithoutUserInput
}

input UserUpsertWithoutLineItemsInput {
  update: UserUpdateWithoutLineItemsDataInput!
  create: UserCreateWithoutLineItemsInput!
}

input UserUpsertWithoutLinkedUserInput {
  update: UserUpdateWithoutLinkedUserDataInput!
  create: UserCreateWithoutLinkedUserInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  linkedUser: LinkedUserWhereInput
  incomingRequest: IncomingRequestWhereInput
  lineItems_every: LineItemWhereInput
  lineItems_some: LineItemWhereInput
  lineItems_none: LineItemWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`