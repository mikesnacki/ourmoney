// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateExpense {
  count: Int!
}

type AggregateIncome {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Expense {
  id: ID!
  createdAt: DateTime!
  title: String!
  amount: Float
  user: User!
}

type ExpenseConnection {
  pageInfo: PageInfo!
  edges: [ExpenseEdge]!
  aggregate: AggregateExpense!
}

input ExpenseCreateInput {
  id: ID
  title: String!
  amount: Float
  user: UserCreateOneWithoutExpensesInput!
}

input ExpenseCreateManyWithoutUserInput {
  create: [ExpenseCreateWithoutUserInput!]
  connect: [ExpenseWhereUniqueInput!]
}

input ExpenseCreateWithoutUserInput {
  id: ID
  title: String!
  amount: Float
}

type ExpenseEdge {
  node: Expense!
  cursor: String!
}

enum ExpenseOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  title_ASC
  title_DESC
  amount_ASC
  amount_DESC
}

type ExpensePreviousValues {
  id: ID!
  createdAt: DateTime!
  title: String!
  amount: Float
}

input ExpenseScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  amount: Float
  amount_not: Float
  amount_in: [Float!]
  amount_not_in: [Float!]
  amount_lt: Float
  amount_lte: Float
  amount_gt: Float
  amount_gte: Float
  AND: [ExpenseScalarWhereInput!]
  OR: [ExpenseScalarWhereInput!]
  NOT: [ExpenseScalarWhereInput!]
}

type ExpenseSubscriptionPayload {
  mutation: MutationType!
  node: Expense
  updatedFields: [String!]
  previousValues: ExpensePreviousValues
}

input ExpenseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ExpenseWhereInput
  AND: [ExpenseSubscriptionWhereInput!]
}

input ExpenseUpdateInput {
  title: String
  amount: Float
  user: UserUpdateOneRequiredWithoutExpensesInput
}

input ExpenseUpdateManyDataInput {
  title: String
  amount: Float
}

input ExpenseUpdateManyMutationInput {
  title: String
  amount: Float
}

input ExpenseUpdateManyWithoutUserInput {
  create: [ExpenseCreateWithoutUserInput!]
  delete: [ExpenseWhereUniqueInput!]
  connect: [ExpenseWhereUniqueInput!]
  set: [ExpenseWhereUniqueInput!]
  disconnect: [ExpenseWhereUniqueInput!]
  update: [ExpenseUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ExpenseUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ExpenseScalarWhereInput!]
  updateMany: [ExpenseUpdateManyWithWhereNestedInput!]
}

input ExpenseUpdateManyWithWhereNestedInput {
  where: ExpenseScalarWhereInput!
  data: ExpenseUpdateManyDataInput!
}

input ExpenseUpdateWithoutUserDataInput {
  title: String
  amount: Float
}

input ExpenseUpdateWithWhereUniqueWithoutUserInput {
  where: ExpenseWhereUniqueInput!
  data: ExpenseUpdateWithoutUserDataInput!
}

input ExpenseUpsertWithWhereUniqueWithoutUserInput {
  where: ExpenseWhereUniqueInput!
  update: ExpenseUpdateWithoutUserDataInput!
  create: ExpenseCreateWithoutUserInput!
}

input ExpenseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  amount: Float
  amount_not: Float
  amount_in: [Float!]
  amount_not_in: [Float!]
  amount_lt: Float
  amount_lte: Float
  amount_gt: Float
  amount_gte: Float
  user: UserWhereInput
  AND: [ExpenseWhereInput!]
}

input ExpenseWhereUniqueInput {
  id: ID
}

type Income {
  id: ID!
  createdAt: DateTime!
  title: String!
  amount: Float
  user: User!
}

type IncomeConnection {
  pageInfo: PageInfo!
  edges: [IncomeEdge]!
  aggregate: AggregateIncome!
}

input IncomeCreateInput {
  id: ID
  title: String!
  amount: Float
  user: UserCreateOneWithoutIncomesInput!
}

input IncomeCreateManyWithoutUserInput {
  create: [IncomeCreateWithoutUserInput!]
  connect: [IncomeWhereUniqueInput!]
}

input IncomeCreateWithoutUserInput {
  id: ID
  title: String!
  amount: Float
}

type IncomeEdge {
  node: Income!
  cursor: String!
}

enum IncomeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  title_ASC
  title_DESC
  amount_ASC
  amount_DESC
}

type IncomePreviousValues {
  id: ID!
  createdAt: DateTime!
  title: String!
  amount: Float
}

input IncomeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  amount: Float
  amount_not: Float
  amount_in: [Float!]
  amount_not_in: [Float!]
  amount_lt: Float
  amount_lte: Float
  amount_gt: Float
  amount_gte: Float
  AND: [IncomeScalarWhereInput!]
  OR: [IncomeScalarWhereInput!]
  NOT: [IncomeScalarWhereInput!]
}

type IncomeSubscriptionPayload {
  mutation: MutationType!
  node: Income
  updatedFields: [String!]
  previousValues: IncomePreviousValues
}

input IncomeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: IncomeWhereInput
  AND: [IncomeSubscriptionWhereInput!]
}

input IncomeUpdateInput {
  title: String
  amount: Float
  user: UserUpdateOneRequiredWithoutIncomesInput
}

input IncomeUpdateManyDataInput {
  title: String
  amount: Float
}

input IncomeUpdateManyMutationInput {
  title: String
  amount: Float
}

input IncomeUpdateManyWithoutUserInput {
  create: [IncomeCreateWithoutUserInput!]
  delete: [IncomeWhereUniqueInput!]
  connect: [IncomeWhereUniqueInput!]
  set: [IncomeWhereUniqueInput!]
  disconnect: [IncomeWhereUniqueInput!]
  update: [IncomeUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [IncomeUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [IncomeScalarWhereInput!]
  updateMany: [IncomeUpdateManyWithWhereNestedInput!]
}

input IncomeUpdateManyWithWhereNestedInput {
  where: IncomeScalarWhereInput!
  data: IncomeUpdateManyDataInput!
}

input IncomeUpdateWithoutUserDataInput {
  title: String
  amount: Float
}

input IncomeUpdateWithWhereUniqueWithoutUserInput {
  where: IncomeWhereUniqueInput!
  data: IncomeUpdateWithoutUserDataInput!
}

input IncomeUpsertWithWhereUniqueWithoutUserInput {
  where: IncomeWhereUniqueInput!
  update: IncomeUpdateWithoutUserDataInput!
  create: IncomeCreateWithoutUserInput!
}

input IncomeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  amount: Float
  amount_not: Float
  amount_in: [Float!]
  amount_not_in: [Float!]
  amount_lt: Float
  amount_lte: Float
  amount_gt: Float
  amount_gte: Float
  user: UserWhereInput
  AND: [IncomeWhereInput!]
}

input IncomeWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createExpense(data: ExpenseCreateInput!): Expense!
  updateExpense(data: ExpenseUpdateInput!, where: ExpenseWhereUniqueInput!): Expense
  updateManyExpenses(data: ExpenseUpdateManyMutationInput!, where: ExpenseWhereInput): BatchPayload!
  upsertExpense(where: ExpenseWhereUniqueInput!, create: ExpenseCreateInput!, update: ExpenseUpdateInput!): Expense!
  deleteExpense(where: ExpenseWhereUniqueInput!): Expense
  deleteManyExpenses(where: ExpenseWhereInput): BatchPayload!
  createIncome(data: IncomeCreateInput!): Income!
  updateIncome(data: IncomeUpdateInput!, where: IncomeWhereUniqueInput!): Income
  updateManyIncomes(data: IncomeUpdateManyMutationInput!, where: IncomeWhereInput): BatchPayload!
  upsertIncome(where: IncomeWhereUniqueInput!, create: IncomeCreateInput!, update: IncomeUpdateInput!): Income!
  deleteIncome(where: IncomeWhereUniqueInput!): Income
  deleteManyIncomes(where: IncomeWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  expense(where: ExpenseWhereUniqueInput!): Expense
  expenses(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Expense]!
  expensesConnection(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExpenseConnection!
  income(where: IncomeWhereUniqueInput!): Income
  incomes(where: IncomeWhereInput, orderBy: IncomeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Income]!
  incomesConnection(where: IncomeWhereInput, orderBy: IncomeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IncomeConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  expense(where: ExpenseSubscriptionWhereInput): ExpenseSubscriptionPayload
  income(where: IncomeSubscriptionWhereInput): IncomeSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  createdAt: DateTime!
  incomes(where: IncomeWhereInput, orderBy: IncomeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Income!]
  expenses(where: ExpenseWhereInput, orderBy: ExpenseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Expense!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  incomes: IncomeCreateManyWithoutUserInput
  expenses: ExpenseCreateManyWithoutUserInput
}

input UserCreateOneWithoutExpensesInput {
  create: UserCreateWithoutExpensesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutIncomesInput {
  create: UserCreateWithoutIncomesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutExpensesInput {
  id: ID
  name: String!
  email: String!
  incomes: IncomeCreateManyWithoutUserInput
}

input UserCreateWithoutIncomesInput {
  id: ID
  name: String!
  email: String!
  expenses: ExpenseCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  createdAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  incomes: IncomeUpdateManyWithoutUserInput
  expenses: ExpenseUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
}

input UserUpdateOneRequiredWithoutExpensesInput {
  create: UserCreateWithoutExpensesInput
  update: UserUpdateWithoutExpensesDataInput
  upsert: UserUpsertWithoutExpensesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutIncomesInput {
  create: UserCreateWithoutIncomesInput
  update: UserUpdateWithoutIncomesDataInput
  upsert: UserUpsertWithoutIncomesInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutExpensesDataInput {
  name: String
  email: String
  incomes: IncomeUpdateManyWithoutUserInput
}

input UserUpdateWithoutIncomesDataInput {
  name: String
  email: String
  expenses: ExpenseUpdateManyWithoutUserInput
}

input UserUpsertWithoutExpensesInput {
  update: UserUpdateWithoutExpensesDataInput!
  create: UserCreateWithoutExpensesInput!
}

input UserUpsertWithoutIncomesInput {
  update: UserUpdateWithoutIncomesDataInput!
  create: UserCreateWithoutIncomesInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  incomes_some: IncomeWhereInput
  expenses_some: ExpenseWhereInput
  AND: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`