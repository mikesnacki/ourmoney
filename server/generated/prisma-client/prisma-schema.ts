// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateLineItem {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type LineItem {
  id: ID!
  createdAt: DateTime!
  name: String!
  amount: Float!
  type: LineItemType!
  deleted: Boolean
  user: User!
}

type LineItemConnection {
  pageInfo: PageInfo!
  edges: [LineItemEdge]!
  aggregate: AggregateLineItem!
}

input LineItemCreateInput {
  id: ID
  name: String!
  amount: Float!
  type: LineItemType!
  deleted: Boolean
  user: UserCreateOneWithoutLineItemsInput!
}

input LineItemCreateManyWithoutUserInput {
  create: [LineItemCreateWithoutUserInput!]
  connect: [LineItemWhereUniqueInput!]
}

input LineItemCreateWithoutUserInput {
  id: ID
  name: String!
  amount: Float!
  type: LineItemType!
  deleted: Boolean
}

type LineItemEdge {
  node: LineItem!
  cursor: String!
}

enum LineItemOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  amount_ASC
  amount_DESC
  type_ASC
  type_DESC
  deleted_ASC
  deleted_DESC
}

type LineItemPreviousValues {
  id: ID!
  createdAt: DateTime!
  name: String!
  amount: Float!
  type: LineItemType!
  deleted: Boolean
}

input LineItemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  amount: Float
  amount_not: Float
  amount_in: [Float!]
  amount_not_in: [Float!]
  amount_lt: Float
  amount_lte: Float
  amount_gt: Float
  amount_gte: Float
  type: LineItemType
  type_not: LineItemType
  type_in: [LineItemType!]
  type_not_in: [LineItemType!]
  deleted: Boolean
  deleted_not: Boolean
  AND: [LineItemScalarWhereInput!]
  OR: [LineItemScalarWhereInput!]
  NOT: [LineItemScalarWhereInput!]
}

type LineItemSubscriptionPayload {
  mutation: MutationType!
  node: LineItem
  updatedFields: [String!]
  previousValues: LineItemPreviousValues
}

input LineItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LineItemWhereInput
  AND: [LineItemSubscriptionWhereInput!]
  OR: [LineItemSubscriptionWhereInput!]
  NOT: [LineItemSubscriptionWhereInput!]
}

enum LineItemType {
  INCOME
  EXPENSE
}

input LineItemUpdateInput {
  name: String
  amount: Float
  type: LineItemType
  deleted: Boolean
  user: UserUpdateOneRequiredWithoutLineItemsInput
}

input LineItemUpdateManyDataInput {
  name: String
  amount: Float
  type: LineItemType
  deleted: Boolean
}

input LineItemUpdateManyMutationInput {
  name: String
  amount: Float
  type: LineItemType
  deleted: Boolean
}

input LineItemUpdateManyWithoutUserInput {
  create: [LineItemCreateWithoutUserInput!]
  delete: [LineItemWhereUniqueInput!]
  connect: [LineItemWhereUniqueInput!]
  set: [LineItemWhereUniqueInput!]
  disconnect: [LineItemWhereUniqueInput!]
  update: [LineItemUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [LineItemUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [LineItemScalarWhereInput!]
  updateMany: [LineItemUpdateManyWithWhereNestedInput!]
}

input LineItemUpdateManyWithWhereNestedInput {
  where: LineItemScalarWhereInput!
  data: LineItemUpdateManyDataInput!
}

input LineItemUpdateWithoutUserDataInput {
  name: String
  amount: Float
  type: LineItemType
  deleted: Boolean
}

input LineItemUpdateWithWhereUniqueWithoutUserInput {
  where: LineItemWhereUniqueInput!
  data: LineItemUpdateWithoutUserDataInput!
}

input LineItemUpsertWithWhereUniqueWithoutUserInput {
  where: LineItemWhereUniqueInput!
  update: LineItemUpdateWithoutUserDataInput!
  create: LineItemCreateWithoutUserInput!
}

input LineItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  amount: Float
  amount_not: Float
  amount_in: [Float!]
  amount_not_in: [Float!]
  amount_lt: Float
  amount_lte: Float
  amount_gt: Float
  amount_gte: Float
  type: LineItemType
  type_not: LineItemType
  type_in: [LineItemType!]
  type_not_in: [LineItemType!]
  deleted: Boolean
  deleted_not: Boolean
  user: UserWhereInput
  AND: [LineItemWhereInput!]
  OR: [LineItemWhereInput!]
  NOT: [LineItemWhereInput!]
}

input LineItemWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createLineItem(data: LineItemCreateInput!): LineItem!
  updateLineItem(data: LineItemUpdateInput!, where: LineItemWhereUniqueInput!): LineItem
  updateManyLineItems(data: LineItemUpdateManyMutationInput!, where: LineItemWhereInput): BatchPayload!
  upsertLineItem(where: LineItemWhereUniqueInput!, create: LineItemCreateInput!, update: LineItemUpdateInput!): LineItem!
  deleteLineItem(where: LineItemWhereUniqueInput!): LineItem
  deleteManyLineItems(where: LineItemWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  lineItem(where: LineItemWhereUniqueInput!): LineItem
  lineItems(where: LineItemWhereInput, orderBy: LineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LineItem]!
  lineItemsConnection(where: LineItemWhereInput, orderBy: LineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LineItemConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  lineItem(where: LineItemSubscriptionWhereInput): LineItemSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  relatedUser: User
  lineItems(where: LineItemWhereInput, orderBy: LineItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LineItem!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  relatedUser: UserCreateOneInput
  lineItems: LineItemCreateManyWithoutUserInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLineItemsInput {
  create: UserCreateWithoutLineItemsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutLineItemsInput {
  id: ID
  name: String!
  email: String!
  relatedUser: UserCreateOneInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
  email: String
  relatedUser: UserUpdateOneInput
  lineItems: LineItemUpdateManyWithoutUserInput
}

input UserUpdateInput {
  name: String
  email: String
  relatedUser: UserUpdateOneInput
  lineItems: LineItemUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
}

input UserUpdateOneInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutLineItemsInput {
  create: UserCreateWithoutLineItemsInput
  update: UserUpdateWithoutLineItemsDataInput
  upsert: UserUpsertWithoutLineItemsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutLineItemsDataInput {
  name: String
  email: String
  relatedUser: UserUpdateOneInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutLineItemsInput {
  update: UserUpdateWithoutLineItemsDataInput!
  create: UserCreateWithoutLineItemsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  relatedUser: UserWhereInput
  lineItems_every: LineItemWhereInput
  lineItems_some: LineItemWhereInput
  lineItems_none: LineItemWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
`